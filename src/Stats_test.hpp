#ifndef STATS_TEST
#define STATS_TEST

#include <stdio.h>
#include <time.h>

#include <boost/test/unit_test.hpp>

#include <Stats.hpp>


using namespace boost::unit_test;

void fill_array_with_random_data(double* array, int len){
    for(int i =0; i < len; i++){
        array[i] = ((double)(rand() % 10000))/100;
    }
}

void copy_array_values(double* source, double* dest, int len){
    for(int i =0; i < len; i++){
        dest[i] = source[i];
    }
}

void print_array(double* arr, int len){
    std::cout << "<<<<<" << std::endl;
    for(int i =0; i < len; i++){
        std::cout << arr[i] << "\t";
        if(!len%10)
            std::cout << std::endl;

    }
    std::cout << "<<<<<" << std::endl;
}

BOOST_AUTO_TEST_CASE( test_pearson_precomputation_simple ){
    int num_samples = 100;
    srand( time(NULL) );

    double* data1 = new double[num_samples];
    double* data2 = new double[num_samples];
    double* pc_data1 = new double[num_samples];
    double* pc_data2 = new double[num_samples];

    double precomp_pearson;
    double avg_precomp_pearson = 0;

    //
    //Perfect correlation
    //
    for(int i = 0; i < num_samples; i++){
        data1[i] = i;
        data2[i] = 2*i;
    }

    precompute_pearson_data(num_samples, data1, pc_data1);
    precompute_pearson_data(num_samples, data2, pc_data2);


    precomp_pearson = pearsoncorr_from_precomputed(num_samples, pc_data1, pc_data2);

    BOOST_CHECK_CLOSE( precomp_pearson, 1, 1);

    //
    //Perfect negative correlation
    //
    for(int i = 0; i < num_samples; i++){
        data1[i] = i;
        data2[i] = (-2)*i;
    }

    precompute_pearson_data(num_samples, data1, pc_data1);
    precompute_pearson_data(num_samples, data2, pc_data2);

    precomp_pearson = pearsoncorr_from_precomputed(num_samples, pc_data1, pc_data2);

    delete pc_data1;
    delete pc_data2;

    BOOST_CHECK_CLOSE( precomp_pearson, -1, 1);

    delete data1;
    delete data2;

}


BOOST_AUTO_TEST_CASE( test_pearson_agains_R_example ){

    int num_samples = 663;

    //double* data1 = new double[num_samples];
    //double* data2 = new double[num_samples];
    double* pc_data1 = new double[num_samples];
    double* pc_data2 = new double[num_samples];

    double precomp_pearson;

    double data1[663] = {0.0,0.0,2.13285,0.0,0.0260317,0.0,0.0,0.0,0.0,0.0,0.206984,0.169014,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.142857,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.183398,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0942029,0.0,0.0,0.0,0.0,1.59179,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.734603,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,10.559,0.415254,1.90631,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.19774,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.333333,0.0,0.0,0.0,0.0,5.35681,0.0,0.19774,0.164319,0.0,1.6385,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,7.82745,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.714921,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.04695,0.480226,0.0,0.0,0.0,0.0,4.55399,5.61299,0.0,0.032175,0.185446,0.0,0.0,0.0,0.774648,0.0,0.0,0.0508221,0.0,1.89841,0.148571,0.417647,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0289855,0.0,0.361004,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.311712,0.0,0.0,0.0,0.0,0.0,0.0,0.983051,0.0,0.0,0.0559846,0.0,0.0,0.0,0.513514,0.0,0.0,0.0,0.0,0.24902,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.514699,0.0,0.0,0.0,0.0,5.08288,0.0,0.121569,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.655367,0.0,0.0,0.0,3.00127,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.124196,0.0,0.0,0.0,0.0225989,0.0,0.100386,0.0,0.0,0.0,0.0,3.62994,0.0,6.16937,0.0,0.0552381,0.0,0.0,0.0,0.0,0.0,0.0,0.615023,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.613353,0.0,0.0,0.201878,0.104891,0.0,0.0,0.0,0.0,0.0,0.313514,0.0,0.0,0.0,2.19565,0.0,2.46244,0.0,0.0,0.0,0.623529,0.0,0.0,0.0,0.0,0.0,0.0,0.359243,0.0,0.0,1.9435,0.0,0.0,0.0,0.0,0.0,0.0,0.019774,0.0,0.0,0.0,0.503922,0.0,0.0,0.0,0.0,0.0,0.0,0.153153,0.0,0.102857,0.0,0.0,0.0,1.08757,0.0,0.0,0.745946,0.0,0.0,0.0,0.0,0.040857,0.0,0.0,0.0,0.0,0.0,0.179537,0.0,0.0,0.0,0.0,0.0,0.546948,0.0,0.0,0.0697559,6.37089,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.541176,0.0,0.0,0.0,0.0,0.254902,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0444015,0.0,0.0,0.0,0.0,0.0,0.0,0.465869,0.590196,0.752941,0.372973,0.0,0.0,0.0,0.0,0.0,0.0,0.347285,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0657277,0.149477,0.0,0.0,0.0,0.0,0.0,0.0,0.364407,1.71429,0.0,0.0,0.934272,0.533462,0.0,0.0,0.0,0.0,0.525162,0.0,0.0,0.0,0.0468361,0.0,0.0,0.0,0.0,0.0,0.0,0.12973,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0926641,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,8.96332,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.331429,0.0,0.170588,0.0,0.0,0.0,0.0,0.0,0.0,0.283009,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0812157,0.0,0.108752,6.89202,0.0,0.0,0.0,0.0,0.176963,0.0,0.0662681,0.166667,0.0,0.0,0.0,0.0,0.12549,0.0,0.0,0.135873,0.0,0.0,0.0,0.0,11.6063,0.636036,0.0,0.0,0.0,0.0,0.0433483,0.211765,0.149758,0.2571,0.0,0.0,0.0,0.0,0.0358744,0.0553064,0.16,0.0501587,0.0,0.0,0.0,0.0,0.0,0.323944,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0747384,0.0,0.910798,0.466102,7.25424,0.0,0.196078,1.12656,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.333333,0.0,0.0,0.0,0.204225,0.0,0.635266,0.0,0.0707851,0.0,0.0,0.311594,0.337778,0.201905,0.0};
    double data2[663] = {0.0,0.0,2.41892,0.0,0.027027,0.0,0.0,0.0,0.0,0.0,0.841055,0.0302445,0.0,0.0,0.0521236,0.0,0.0,0.0,0.0,0.0,0.250322,0.0501931,0.0,0.0,0.0752896,0.0617761,0.0,0.0,0.0,0.0,0.0,0.183398,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0315315,0.0,0.0,0.0785071,0.0,0.0,0.0,0.0,1.96332,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.028314,0.0,0.0,0.0,0.0,0.0,0.0482625,1.28121,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0694981,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.285714,0.0,0.0199485,12.2413,0.813385,2.32111,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.02574,0.0,0.0,0.0,0.0,0.0,0.0,0.143501,0.0,0.0,0.029601,0.0849421,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0263835,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,6.31145,0.0,0.736808,0.2426,0.0,1.57658,0.118404,0.0,0.0,0.0,0.0,0.0,0.0,0.0,10.3906,0.0,0.0,0.0,0.0,0.0,0.0,0.0656371,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0804376,0.0,0.0,1.10746,0.0566281,0.0,0.133205,0.0,0.046332,0.0,0.0,0.166667,0.0,0.0,0.0559846,0.0,0.0,1.83398,0.720077,0.0,0.146075,0.0,0.0,7.85135,5.64672,0.0,0.032175,0.0263835,0.0,0.0,0.0,0.765766,0.0559846,0.0,0.222008,0.0,1.33398,0.164093,0.266409,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.03861,0.155727,0.361004,0.0527671,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.109395,0.1139,0.0,0.0,0.110039,0.0553411,0.0,0.0,0.0,0.0,0.0,0.873874,0.0,0.0,0.0,0.0,0.0,0.0,1.02574,0.0,0.0,0.0559846,0.0,0.0,0.0,0.98713,0.0,0.0,0.0,0.111969,0.679537,0.110682,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0772201,0.399614,0.0,0.0,0.0,0.0,6.61905,0.0,0.315959,0.0,0.0,0.0,0.0,0.110039,0.0,0.0,0.0,0.0,0.0,0.0,0.949807,0.0,0.0,0.0,3.32497,0.0,0.0546976,0.0,0.108108,0.202059,0.0,0.0,0.0,0.124196,0.0,0.0,0.0,0.041184,0.0,0.100386,0.0,0.0,0.0,0.0,4.35521,0.933076,9.29344,93.1223,0.167954,0.0,0.106178,0.0,0.0,0.0,0.0,1.22651,0.0,0.0,0.0553411,0.0,0.0,0.0,0.0,0.0,0.0,0.425354,0.0,0.0,0.51094,0.104891,0.0,0.0,0.0,0.0,0.0,0.220077,0.0,0.0,0.0,2.86229,0.0,2.30566,0.110682,0.109395,0.0,0.741313,0.0,0.15444,0.0,0.0,0.0,0.0,0.496782,0.0,0.0,1.25997,0.0,0.0,0.0,0.0965251,0.0,0.0,0.0,0.0,0.0913771,0.0,0.609395,0.17825,0.0,0.0,0.318533,0.0,0.0,0.256757,0.0,0.0,0.0,0.0,0.0,1.95045,0.0,0.0,1.30051,0.109395,0.0,0.0,0.0,0.158945,0.0,0.0,0.0,0.0,0.0,0.179537,0.0,0.0,0.0,0.0,0.0,0.803089,0.0,0.0,0.166023,8.53024,0.0,0.0,0.0,0.0,0.0,0.0,0.0849421,0.0,0.772201,0.0,0.0,0.0,0.256757,1.7175,0.0,0.0,0.0,0.0740026,0.0,0.0,0.0,0.0,0.119048,0.0444015,0.0,0.0,0.0,0.0,0.0456885,0.0,0.692407,0.629344,0.849421,0.391248,0.0,0.0,0.0,0.0,0.0,0.0,0.697555,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0913771,0.0,0.0,0.0,0.102317,0.0,0.0,0.0,0.0,0.0,0.0,0.22973,1.71429,0.0,0.0,1.48198,0.533462,0.0,0.0926641,0.0,0.0,0.593308,0.0,0.0,0.0,0.175032,0.0604891,0.0,0.0669241,0.0,0.127413,0.0,0.301158,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0926641,0.0,0.0,0.030888,0.0,0.0,0.0,0.0,0.0,0.0701416,0.0,0.0,0.0546976,0.0,0.0,8.96332,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.362291,0.0,0.161519,0.0,0.0,0.046332,0.0,0.0740026,0.0,0.0913771,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.200129,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.107465,0.173745,0.108752,7.01351,0.0,0.0,0.0,0.0,0.176963,0.0,0.0444015,0.212355,0.128057,0.0,0.0,0.0,0.224582,0.0418275,0.0,0.187259,0.0,0.0,0.0,0.0,14.5528,0.595882,0.0,0.0553411,0.0,0.0,0.111326,0.110682,0.298584,0.277992,0.0,0.142214,0.0,0.0,0.0,0.0,0.10296,0.144144,0.0,0.0,0.0,0.0,0.0,0.618404,0.0,0.0,0.0,0.0,0.0,0.0,0.0926641,0.167954,0.0,0.0,0.0,0.0,0.0,0.0,0.0933076,0.0,0.92471,0.21686,8.45431,0.0875161,0.20399,1.53282,0.108108,0.482625,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.333333,0.0,0.0,0.0,0.0,0.0,0.28314,0.0,0.0707851,0.0,0.0,0.326255,0.387387,0.41184,0.0};

    precompute_pearson_data(num_samples, data1, pc_data1);
    precompute_pearson_data(num_samples, data2, pc_data2);


    precomp_pearson = pearsoncorr_from_precomputed(num_samples, pc_data1, pc_data2);

    BOOST_CHECK_CLOSE(0.31948, precomp_pearson, 1);

}

BOOST_AUTO_TEST_CASE( test_pearson_precomputation_simple_random ){

    int num_iterations = 1000; 
    int num_samples = 1000;
    srand( time(NULL) );

    double* data1 = new double[num_samples];
    double* data2 = new double[num_samples];
    double* pc_data1 = new double[num_samples];
    double* pc_data2 = new double[num_samples];


    double precomp_pearson;
    double avg_precomp_pearson = 0;

    for(int i = 0; i < num_iterations; i++){

        fill_array_with_random_data(data1, num_samples);
        fill_array_with_random_data(data2, num_samples);

        precompute_pearson_data(num_samples, data1, pc_data1);
        precompute_pearson_data(num_samples, data2, pc_data2);

        precomp_pearson = pearsoncorr_from_precomputed(num_samples, pc_data1, pc_data2);

        avg_precomp_pearson+=precomp_pearson;


    }
    avg_precomp_pearson/=num_iterations;

    delete data1;
    delete data2;
    delete pc_data1;
    delete pc_data2;

    BOOST_CHECK_SMALL(avg_precomp_pearson, 0.01);

}



#endif
